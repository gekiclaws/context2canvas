import re, ast
import tiktoken

from modules.llm.openai_client import prompt_model
from modules.rag import index_data, get_or_create_collection, query_data

def generate_code(viz_type, question, columns, summary_stats, df, examples, metrics_on):
    """
    Generate Python code for a visualization based on provided profiling parameters.

    The function first queries the collection for examples related to the data question and 
    then uses an LLM to generate Python code for building a visualization.

    Args:
        viz_type (str): The visualization type determined by the input profiler.
        question (str): The data question generated by the input profiler.
        columns (dict): A dictionary of column names and their data types.
        summary_stats (dict): Summary statistics of the dataset.

    Returns:
        str: Generated Python code for creating the desired visualization.
    """

    # import heuristic ruleset for designing graphs
    file = open('ruleset.txt', 'r')
    design_rules = file.read()
    file.close()

    # Generate Python code using the prompt_model (LLM)

    response_prompt = f"""
        Generate python code for this visualization, given the following parameters:\n
        - Visualization Type: {viz_type}\n
        - Data Question: {question}\n
        - Columns: {columns}\n
        - Summary Statistics: {summary_stats}\n
        - Dataframe: {df}\n
        Ensure your dataframe variable is labelled `df`.\n
        Ensure your code is wrapped in a ```python ... ``` code block.\n
        Model your output on the following examples:\n{examples}
        Make sure to follor these design rules as well: {design_rules}
    """
    response = prompt_model(response_prompt)
    extracted_code = extract_code_from_response(response)
    cleaned_code = clean_code(extracted_code)

    if metrics_on:
        encoding = tiktoken.encoding_for_model("gpt-4o-mini")

        response_input_tokens = encoding.encode(response_prompt)
        response_output_tokens = encoding.encode(response)
        total_input_tokens = len(response_input_tokens)
        total_output_tokens = len(response_output_tokens)

        print(f"Input Token Consumption: {total_input_tokens}")
        print(f"Output Token Consumption: {total_output_tokens}")

    return cleaned_code

def extract_code_from_response(response):
    """
    Extracts Python code from a markdown-style code block in the given output string.
    Handles cases where the code is wrapped in ```python ... ``` or just ``` ... ```.
    Returns the extracted code as a string, or None if no code block is found.
    """
    # Try to match ```python ... ```
    match = re.search(r"```(?:python)?\n(.*?)```", response, re.DOTALL)
    if match:
        return match.group(1).strip()
    else:
        raise Exception("LLM failed to generate code for visualization.")

def clean_code(source: str) -> str:
    # 1) Remove the comment block (and everything until the next blank line)
    source = re.sub(
        r"(?ms)^#\s*Create the DataFrame.*?(\n\s*\n)", 
        "\n", 
        source
    )

    # 2) Now strip any df assignments via AST
    tree = ast.parse(source)
    filtered = [
        node for node in tree.body
        if not (
            isinstance(node, ast.Assign)
            and any(isinstance(t, ast.Name) and t.id=="df"
                    for t in node.targets)
        )
    ]
    return ast.unparse(ast.Module(filtered, type_ignores=[]))

if __name__ == "__main__":
    # In a complete application these values would come from the input_profiler module.
    viz_type = "bar"
    question = "What is the distribution of film ratings?"
    columns = {"rating": "float", "title": "object"}
    summary_stats = {"rating": {"mean": 7.5, "std": 1.2}}

    # Build the collection using the RAG module
    annotations, _ = index_data()
    collection = get_or_create_collection(annotations)
    examples = query_data(question, collection)
    
    df = None
    generated_code = generate_code(viz_type, question, columns, summary_stats, df, examples)
    print("Generated Code:")
    print(generated_code)