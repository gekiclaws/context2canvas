import re

import bootstrap
from modules.llm.openai_client import prompt_model
from modules.rag import query_data, get_or_create_collection, index_data

def generate_code(viz_type, question, columns, summary_stats, collection):
    """
    Generate Python code for a visualization based on provided profiling parameters and examples 
    retrieved from a ChromaDB collection.

    The function first queries the collection for examples related to the data question and 
    then uses an LLM to generate Python code for building a visualization.

    Args:
        viz_type (str): The visualization type determined by the input profiler.
        question (str): The data question generated by the input profiler.
        columns (dict): A dictionary of column names and their data types.
        summary_stats (dict): Summary statistics of the dataset.
        collection (Collection): The ChromaDB collection to query for relevant examples.

    Returns:
        str: Generated Python code for creating the desired visualization.
    """
    # Retrieve examples from the collection based on the question
    examples = query_data(question, collection)
    # Generate Python code using the prompt_model (LLM)
    response = prompt_model(
        f"Generate python code for this visualization, given the following parameters:\n"
        f"- Visualization Type: {viz_type}\n"
        f"- Data Question: {question}\n"
        f"- Columns: {columns}\n"
        f"- Summary Statistics: {summary_stats}\n"
        f"Ensure your code is wrapped in a ```python ... ``` code block.\n"
        f"Model your output on the following examples:\n{examples}"
    )
    extracted_code = extract_code(response)
    return extracted_code

def extract_code(output):
    """
    Extracts Python code from a markdown-style code block in the given output string.
    Handles cases where the code is wrapped in ```python ... ``` or just ``` ... ```.
    Returns the extracted code as a string, or None if no code block is found.
    """
    # Try to match ```python ... ```
    match = re.search(r"```(?:python)?\n(.*?)```", output, re.DOTALL)
    if match:
        return match.group(1).strip()
    else:
        print("⚠️ No valid code block found in output.")
        return None

if __name__ == "__main__":
    # Example usage:
    # In a complete application these values would come from the input_profiler module.
    viz_type = "bar"
    question = "What is the distribution of film ratings?"
    columns = {"rating": "float", "title": "object"}
    summary_stats = {"rating": {"mean": 7.5, "std": 1.2}}

    # Build the collection using the RAG module
    annotations, _ = index_data()
    collection = get_or_create_collection(annotations)
    
    generated_code = generate_code(viz_type, question, columns, summary_stats, collection)
    print("Generated Code:")
    print(generated_code)